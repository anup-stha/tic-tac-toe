{"version":3,"sources":["components/Square.js","components/Board.js","components/Draw.js","components/Winner.js","components/Restart.js","App.js","serviceWorker.js","index.js"],"names":["Square","onClick","value","style","isWinning","className","data-pro","Board","squares","winner","map","square","i","includes","id","Draw","isDraw","Winner","Restart","gameStart","isXnext","App","useState","Array","fill","board","setBoard","setIsXnext","setGameStart","setIsDraw","playerhandler","str","startGame","result","winCond","length","a","b","c","match","calculateWinner","win","restartGame","boardCopy","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ddfdb84a.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Square({onClick,value,isWinning}) {\nlet style = 'box';\n if(isWinning === true){\n   style = style +\" win\"\n    \n }\n  return (\n    \n       <div className = {style} data-pro ={value} onClick={onClick}>\n   \n           {value}\n        </div>\n     \n   \n  );\n}\n\nexport default Square;\n","import React from \"react\";\nimport Square from \"./Square\";\n\nfunction Board({ squares, onClick, winner }) {\n\n  \n  return (\n    <div className=\"game-board\">\n      \n        \n      {squares.map((square, i) => {\n       let isWinning = false;\n       if (winner !== null && winner !== \"draw\") {\n       \n         if(winner.includes(i)){\n             isWinning = true;\n         }\n         else{\n             isWinning = false;\n         }\n        \n        }\n       \n        return (\n          <Square\n            key={i}\n            isWinning ={isWinning}\n            id = {i}\n            value={square}\n            onClick={() => onClick(i)}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default Board;\n","import React from 'react';\n\nconst Draw  =({isDraw,onClick}) =>{\n    return(\n        <div className={isDraw !== false ? \"\" : \"hide\"}>\n        <div className=\"menu-i\">\n          <div className=\"menu-item menu-inner\" onClick={onClick}>DRAW</div>\n        </div>\n      </div>\n    \n    )\n}\n\nexport default Draw\n","import React from 'react';\n\nconst Winner  =({winner,isDraw,onClick}) =>{\n    return(\n        <div className={winner && isDraw === false ? \"\" : \"hide\"}>\n        <div className=\"menu-i\">\n          <div className=\"menu-item menu-inner\" onClick={onClick}>\n            Winner \n            <br />\n            <span className =\"text\">{winner}</span>\n          </div>\n        </div>\n      </div>\n    \n    )\n}\n\nexport default Winner;\n","import React from 'react';\n\nconst Restart  =({winner,isDraw,gameStart,isXnext,onClick}) =>{\n    return(\n        <div\n        className={\n          !gameStart === true || winner !== null || isDraw === true\n            ? \"hide\"\n            : \"\"\n        }\n      >\n        \n        <div className=\"game-options\">\n        <span className=\"game-options-item\">{isXnext === true ? \"X\" : \"O\"}</span>\n  \n            <div className=\"game-options-item\" onClick={onClick}>\n          \n              RESTART GAME\n            </div>\n          </div>\n        </div>\n    )\n}\n\nexport default Restart;\n","import React, { useState } from \"react\";\n\n//import Square from './components/Square'\n\nimport \"./App.css\";\n\nimport Board from \"./components/Board\";\nimport Draw from \"./components/Draw\"\nimport Winner from './components/Winner';\nimport Restart from './components/Restart';\n\nfunction App() {\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [isXnext, setIsXnext] = useState(true);\n  const [gameStart, setGameStart] = useState(false);\n  const [isDraw, setIsDraw] = useState(false);\n  \n  const playerhandler = (str) => {\n    if (str === \"X\") {\n      setIsXnext(true);\n      startGame();\n    } else {\n      setIsXnext(false);\n      startGame();\n    }\n  };\n\n  const calculateWinner = (square) => {\n    const winCond = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < winCond.length; i++) {\n      const [a, b, c] = winCond[i];\n      if (square[a] && square[a] === square[b] && square[a] === square[c]) {\n        return { winner: square[a], match: winCond[i] };\n      }\n    }\n\n    return null;\n  };\n  const result = calculateWinner(board);\n  const winner = result\n    ? typeof result === \"object\"\n      ? result.winner\n      : null\n    : null;\n\n  const win = result ? result.match : null;\n\n  const handleClick = (i) => {\n    const boardCopy = [...board];\n    if (boardCopy[i] || winner) return;\n    boardCopy[i] = isXnext ? \"X\" : \"O\";\n    setBoard(boardCopy);\n    if (winner === null){\n      if( !board.includes(null)) {\n      setIsDraw(true);}\n\n    }\n\n    setIsXnext(!isXnext);\n  };\n  const startGame = () => {\n    setBoard(Array(9).fill(null));\n\n    setGameStart(!gameStart);\n  };\n  const restartGame = () => {\n    setBoard(Array(9).fill(null));\n    \n    setIsDraw(false);\n  };\n\n  return (\n    <div>\n      <div className={gameStart ? \"hide\" : \"\"}>\n        <div className=\"menu\">\n          <div className=\"menu-item text\" onClick={startGame}>\n            TIC TAC TOE\n          </div>\n          <div className=\"select\">\n            CHOOSE YOUR WEAPON\n            <div className=\"select-items\">\n              <span onClick={() => playerhandler(\"X\")}> X </span>\n              <span onClick={() => playerhandler(\"O\")}> O </span>\n            </div>\n          </div>\n        </div>\n      </div>\n     \n      <div className={winner !== null || isDraw === true ? \"finish\" : \"\"}>\n        <div className={!gameStart === true ? \"hide\" : \"\"}>\n          <Board squares={board} winner={win} onClick={handleClick} />\n        </div>\n      </div>\n    \n      <Restart isDraw ={isDraw} winner ={winner} onClick={restartGame} gameStart={gameStart} isXnext ={isXnext}/>\n      <Winner isDraw ={isDraw} winner ={winner} onClick={restartGame} />\n      <Draw isDraw ={isDraw} onClick={restartGame} />\n      </div>\n      \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}